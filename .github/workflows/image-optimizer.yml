# Êñá‰ª∂Ë∑ØÂæÑ: .github/workflows/image-optimizer.yml

name: 'ü§ñ Optimize Bundle Images with ShortPixel'

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png'
      - 'content/**/*.jpeg'
  
  schedule:
    - cron: '0 0 * * *'
    
  workflow_dispatch:

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'

    steps:
      - name: '‚¨áÔ∏è Checkout Code'
        uses: actions/checkout@v4

      - name: 'üîß Install Dependencies'
        run: sudo apt-get update && sudo apt-get install -y imagemagick jq dnsutils

      - name: 'üîÑ Find Images to Process'
        id: find_files
        run: |
          echo "üîç Finding images that need conversion..."
          FILE_LIST=$(
            find content -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) | while read -r f; do
              if [ ! -f "${f%.*}.avif" ]; then
                echo "$f"
              fi
            done
          )
          UNCONVERTED_FILES=$(echo $FILE_LIST)
          if [ -n "$UNCONVERTED_FILES" ]; then
            echo "  - Found $(echo $UNCONVERTED_FILES | wc -w) unconverted images."
            echo "files_to_process=${UNCONVERTED_FILES}" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No images to process."
            echo "files_to_process=" >> $GITHUB_OUTPUT
          fi
          
      - name: 'üöÄ Process Images with ShortPixel and Smart Polling'
        if: steps.find_files.outputs.files_to_process != ''
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
          FILES_TO_PROCESS: ${{ steps.find_files.outputs.files_to_process }}
          MAX_ATTEMPTS: 5
          POLL_INTERVAL_SECONDS: 60
        run: |
          PENDING_URLS_STRING=$(echo "$FILES_TO_PROCESS" | tr ' ' '\n' | jq -R . | jq -s 'map("https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/" + .)')
          
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -eq 0 ]; then
                echo "üéâ All images processed successfully!"
                break
            fi

            echo -e "\n-=================================-\n-   ATTEMPT ${attempt} / ${MAX_ATTEMPTS}\n-   Processing $(echo "$PENDING_URLS_STRING" | jq 'length') images...\n-=================================-\n"

            JSON_PAYLOAD=$(jq -n --arg key "$SHORTPIXEL_KEY" --argjson urls "$PENDING_URLS_STRING" '{
              key: $key, plugin_version: "GHA44", lossy: 2, wait: 30, convertto: "+avif", urllist: $urls
            }')

            echo "üìû Calling ShortPixel API..."
            API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php)
            
            echo "‚úÖ API call successful. Analyzing results..."

            # <<< FIX START: This is the core logical fix. >>>
            # 1. First, process and download all SUCCESSFUL images.
            # Use `select` to filter only successful items (Status Code 2).
            # The `while` loop is now only for processing, not for building retry lists.
            echo "$API_RESPONSE" | jq -c '.[] | select(.Status.Code == "2")' | while read -r item; do
              original_url=$(echo "$item" | jq -r .OriginalURL)
              original_path=$(echo "$original_url" | sed "s|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/||")
              avif_url=$(echo "$item" | jq -r .AVIFURL)
              if [ "$avif_url" == "null" ] || [ -z "$avif_url" ]; then echo "    - ‚ö†Ô∏è UNEXPECTED: Status 2 but AVIF URL is null for '$original_path'."; continue; fi
              
              dir_path=$(dirname "$original_path"); base_name=$(basename "$original_path" | sed 's/\.[^.]*$//'); avif_path="$dir_path/$base_name.avif"
              echo "    - ‚úÖ SUCCESS: Downloading for $original_path"
              
              curl -fsS --retry 3 -o "$avif_path" "$avif_url"
              if [ -s "$avif_path" ]; then
                  dimensions=$(identify -format "%wx%h" "$original_path")
                  yaml_file="$dir_path/.image_dimensions.yaml"; touch "$yaml_file"
                  grep -q "${base_name}:" "$yaml_file" && sed -i "s|${base_name}:.*|${base_name}: ${dimensions}|" "$yaml_file" || echo "${base_name}: ${dimensions}" >> "$yaml_file"
                  echo "    -   Saved dimensions and removing original file: $original_path"
                  rm "$original_path"
              else
                  echo "    -   ‚ùå Download failed for '$original_path'. It will be retried."
              fi
            done
            
            # 2. Log any other statuses for clarity.
            echo "$API_RESPONSE" | jq -c '.[] | select(.Status.Code != "2")' | while read -r item; do
              status_code=$(echo "$item" | jq -r .Status.Code)
              status_message=$(echo "$item" | jq -r .Status.Message)
              original_url=$(echo "$item" | jq -r .OriginalURL)
              original_path=$(echo "$original_url" | sed "s|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/||")
              if [ "$status_code" == "1" ]; then
                echo "    - ‚è≥ IN PROGRESS: '$original_path' is still processing."
              else
                echo "    - ‚ùå ERROR ($status_code): Could not process '$original_path'. Reason: '$status_message'."
              fi
            done

            # 3. Atomically generate the list of URLs for the NEXT attempt.
            # This single `jq` command replaces the flawed shell logic entirely.
            # It selects any items that are NOT successful and extracts their original URL.
            NEXT_PENDING_URLS_STRING=$(echo "$API_RESPONSE" | jq '[.[] | select(.Status.Code != "2") | .OriginalURL]')
            PENDING_URLS_STRING="$NEXT_PENDING_URLS_STRING"
            # <<< FIX END >>>

            if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -gt 0 ] && [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                echo -e "\n\t... waiting ${POLL_INTERVAL_SECONDS} seconds before next attempt ...\n"
                sleep $POLL_INTERVAL_SECONDS
            fi
          done

          if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -gt 0 ]; then
              echo "‚ö†Ô∏è WARNING: After ${MAX_ATTEMPTS} attempts, the following images are still not processed:"
              echo "$PENDING_URLS_STRING" | jq -r '.[]'
          fi

      - name: 'üöÄ Commit and Push Changes'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'build(media): Convert bundle images to AVIF'
          commit_author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

