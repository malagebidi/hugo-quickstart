name: '🤖 Optimize Bundle Images with ShortPixel'
on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png'
      - 'content/**/*.jpeg'
 
  schedule:
    - cron: '0 0 * * *'
    
  workflow_dispatch:
jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'
    steps:
      - name: '⬇️ Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: '🔄 Pull Latest Changes'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git pull origin main || true
      - name: '🔧 Install Dependencies'
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          
          # 获取最新 release 的 assets 列表
          ASSETS=$(curl -s https://api.github.com/repos/ImageMagick/ImageMagick/releases/latest | jq -r '.assets[].browser_download_url')

          # 过滤出 gcc 版 AppImage
          APPIMAGE_URL=$(echo "$ASSETS" | grep 'gcc-x86_64.AppImage$' | head -n 1)
          echo "Downloading from: $APPIMAGE_URL"

          # 下载并安装
          curl -L "$APPIMAGE_URL" -o /usr/local/bin/magick
          chmod +x /usr/local/bin/magick
          ln -s /usr/local/bin/magick /usr/local/bin/identify
          ln -s /usr/local/bin/magick /usr/local/bin/convert
      - name: '🔄 Find Images to Process'
        id: find_files
        run: |
          echo "🔍 Finding images that need conversion..."
          
          FILES_TO_PROCESS=""
          
          # 使用 for 循环代替 find 来避免语法错误
          for ext in jpg jpeg png; do
            for file in $(find content -type f -name "*.${ext}" 2>/dev/null || true); do
              if [ -f "$file" ]; then
                base_path="${file%.*}"
                
                # 获取原图尺寸
                dimensions=$(identify -format "%wx%h" "$file" 2>/dev/null || echo "0x0")
                width=$(echo "$dimensions" | cut -d'x' -f1)
                
                # 定义需要的尺寸
                sizes="256 384 512 768 1024 1536 2048 3072 4096"
                
                
                # 检查各个尺寸的 AVIF
                for size in $sizes; do
                  if [ "$width" -gt "$size" ] && [ ! -f "${base_path}_${size}w.avif" ]; then
                    break
                  fi
                done
                
                FILES_TO_PROCESS="$FILES_TO_PROCESS $file"
              fi
            done
          done
          
          # 输出结果
          if [ -n "$FILES_TO_PROCESS" ]; then
            echo "files_to_process=$FILES_TO_PROCESS" >> $GITHUB_OUTPUT
            echo "  - Found $(echo $FILES_TO_PROCESS | wc -w) images needing processing."
          else
            echo "files_to_process=" >> $GITHUB_OUTPUT
            echo "✅ No images to process."
          fi
      - name: '🚀 Process Images with ShortPixel'
        if: steps.find_files.outputs.files_to_process != ''
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
          FILES_TO_PROCESS: ${{ steps.find_files.outputs.files_to_process }}
          MAX_ATTEMPTS: 5
          POLL_INTERVAL_SECONDS: 30
        run: |
          # 用于跟踪已处理的原始文件
          declare -A processed_originals
          declare -A file_dimensions
          
          # 首先获取所有文件的尺寸信息
          for file_path in $FILES_TO_PROCESS; do
            if [ -f "$file_path" ]; then
              dimensions=$(identify -format "%wx%h" "$file_path")
              file_dimensions["$file_path"]="$dimensions"
              echo "📏 Processing $file_path ($dimensions)"
            fi
          done
          
          # 处理每个文件
          for file_path in $FILES_TO_PROCESS; do
            if [ ! -f "$file_path" ]; then
              echo "⚠️ File not found: $file_path"
              continue
            fi
            
            echo -e "\n🔄 Processing: $file_path"
            base_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$file_path"
            base_path="${file_path%.*}"
            dir_path=$(dirname "$file_path")
            base_name=$(basename "$file_path" | sed 's/\.[^.]*$//')
            
            # 从缓存的尺寸信息获取
            dimensions="${file_dimensions[$file_path]}"
            width=$(echo "$dimensions" | cut -d'x' -f1)
            height=$(echo "$dimensions" | cut -d'x' -f2)
            
            echo "  Original dimensions: ${width}x${height}"
            
            # 定义需要生成的尺寸
            sizes="256 384 512 768 1024 1536 2048 3072 4096"
            
            # 检查原图处理（只有宽度<=4096且不存在对应AVIF的才处理）
            if [ "$width" -le 4096 ] && [ ! -f "${base_path}.avif" ]; then
              echo "  - Will generate original size AVIF (${width}x${height})"
              
              # 处理原图
              echo "    Processing original..."
              success=false
              for attempt in $(seq 1 $MAX_ATTEMPTS); do
                echo "      Attempt $attempt/$MAX_ATTEMPTS"
                
                JSON_PAYLOAD='{
                  "key": "'$SHORTPIXEL_KEY'",
                  "plugin_version": "GHA45",
                  "lossy": 2,
                  "wait": 20,
                  "urllist": ["'$base_url'"],
                  "paramlist": [{
                    "resize": 0,
                    "convertto": "avif"
                  }]
                }'
                
                API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php)
                
                if [ -n "$API_RESPONSE" ] && echo "$API_RESPONSE" | jq empty 2>/dev/null; then
                  status_code=$(echo "$API_RESPONSE" | jq -r '.[0].Status.Code // empty')
                  avif_url=$(echo "$API_RESPONSE" | jq -r '.[0].AVIFLossyURL // empty')
                  
                  if [ "$status_code" = "2" ] && [ -n "$avif_url" ] && [ "$avif_url" != "null" ] && [ "$avif_url" != "NA" ]; then
                    if curl -fsS --retry 2 -o "${base_path}.avif" "$avif_url"; then
                      echo "      ✅ Successfully generated: $(basename "${base_path}.avif")"
                      processed_originals["$file_path"]=1
                      success=true
                      break
                    else
                      echo "      ❌ Failed to download from: $avif_url"
                    fi
                  else
                    echo "      ❌ API failed with status: $status_code"
                    if [ -n "$API_RESPONSE" ]; then
                      echo "      Error: $(echo "$API_RESPONSE" | jq -r '.[0].Status.Message // "Unknown error"')"
                    fi
                  fi
                else
                  echo "      ❌ Invalid API response"
                fi
                
                if [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                  echo "      Waiting ${POLL_INTERVAL_SECONDS}s before retry..."
                  sleep $POLL_INTERVAL_SECONDS
                fi
              done
              
              if [ "$success" != "true" ]; then
                echo "      ⚠️ Failed to generate original after $MAX_ATTEMPTS attempts"
              fi
            elif [ "$width" -gt 3840 ]; then
              echo "  - Skipping original size AVIF (${width}x${height} > 3840w limit)"
            fi
            
            # 处理各个尺寸
            for target_width in $sizes; do
              if [ "$width" -gt "$target_width" ] && [ ! -f "${base_path}_${target_width}w.avif" ]; then
                echo "  - Will generate ${target_width}w version (${target_width}x${target_height})"
                
                echo "    Processing ${target_width}w..."
                success=false
                for attempt in $(seq 1 $MAX_ATTEMPTS); do
                  echo "      Attempt $attempt/$MAX_ATTEMPTS"
                  
                  JSON_PAYLOAD='{
                    "key": "'$SHORTPIXEL_KEY'",
                    "plugin_version": "GHA45",
                    "lossy": 2,
                    "wait": 20,
                    "urllist": ["'$base_url'"],
                    "paramlist": [{
                      "resize": 3,
                      "resize_width": '$target_width',
                      "resize_height": 99999,
                      "convertto": "avif"
                    }]
                  }'
                  
                  API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php)
                  
                  if [ -n "$API_RESPONSE" ] && echo "$API_RESPONSE" | jq empty 2>/dev/null; then
                    status_code=$(echo "$API_RESPONSE" | jq -r '.[0].Status.Code // empty')
                    avif_url=$(echo "$API_RESPONSE" | jq -r '.[0].AVIFLossyURL // empty')
                    
                    if [ "$status_code" = "2" ] && [ -n "$avif_url" ] && [ "$avif_url" != "null" ] && [ "$avif_url" != "NA" ]; then
                      output_file="${base_path}_${target_width}w.avif"
                      if curl -fsS --retry 2 -o "$output_file" "$avif_url"; then
                        echo "      ✅ Successfully generated: $(basename "$output_file")"
                        success=true
                        break
                      else
                        echo "      ❌ Failed to download from: $avif_url"
                      fi
                    else
                      echo "      ❌ API failed with status: $status_code"
                      if [ -n "$API_RESPONSE" ]; then
                        echo "      Error: $(echo "$API_RESPONSE" | jq -r '.[0].Status.Message // "Unknown error"')"
                      fi
                    fi
                  else
                    echo "      ❌ Invalid API response"
                  fi
                  
                  if [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                    echo "      Waiting ${POLL_INTERVAL_SECONDS}s before retry..."
                    sleep $POLL_INTERVAL_SECONDS
                  fi
                done
                
                if [ "$success" != "true" ]; then
                  echo "      ⚠️ Failed to generate ${target_width}w after $MAX_ATTEMPTS attempts"
                fi
              fi
            done
          done
          
          # 统一处理所有成功转换的原始文件
          echo -e "\n🗂️ Updating .image_dimensions.yaml for all original files..."
          for original_file in $FILES_TO_PROCESS; do
            if [ -f "$original_file" ]; then
              base_path="${original_file%.*}"
              dir_path=$(dirname "$original_file")
              base_name=$(basename "$original_file" | sed 's/\.[^.]*$//')
              yaml_file="$dir_path/.image_dimensions.yaml"
              touch "$yaml_file"

              # 获取尺寸
              dimensions=$(identify -format "%wx%h" "$original_file")

              # 写入 YAML（如果已存在则更新，否则新增）
              if grep -q "^${base_name}:" "$yaml_file" 2>/dev/null; then
                sed -i "s|^${base_name}:.*|${base_name}: ${dimensions}|" "$yaml_file"
              else
                echo "${base_name}: ${dimensions}" >> "$yaml_file"
              fi

              # 可选：log 是否生成了 AVIF 文件
              if [ -f "${base_path}.avif" ] || ls "${base_path}_"*"w.avif" >/dev/null 2>&1; then
                echo "  ✅ AVIF exists for: $base_name"
              else
                echo "  ⚠️ No AVIF files for: $base_name"
              fi
            fi
          done
      
      - name: '🚀 Commit and Push Changes'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          # 🛡️ 安全检查：确保我们有最新的远程状态
          git fetch origin main

          # 🛡️ 检查是否有新的提交
          LOCAL_BASE=$(git rev-parse HEAD)
          REMOTE_HEAD=$(git rev-parse origin/main)

          if [ "$LOCAL_BASE" != "$REMOTE_HEAD" ]; then
            echo "⚠️ 检测到远程仓库有新提交，为避免覆盖，终止操作"
            echo "请重新运行工作流来处理最新的更改"
            echo "Local: $LOCAL_BASE"
            echo "Remote: $REMOTE_HEAD"
            exit 1
          fi
          
          echo "🔍 Checking for changes..."
          git add content/
          if git diff --cached --quiet; then
            echo "📭 No changes to commit"
          else
            echo "✅ Found changes, committing..."
            git commit -m "build(media): Convert images to multi-size AVIF"

            # 🛡️ 最后一次检查，然后安全推送
            git fetch origin main
            git push origin main
            echo "🚀 Changes pushed successfully"
          fi
