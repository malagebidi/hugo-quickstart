# .github/workflows/image-optimizer.yml
name: '🤖 Optimize Bundle Images with ShortPixel'

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png' 
      - 'content/**/*.jpeg'

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # 防止机器人推送再次触发工作流，导致无限循环
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'

    steps:
      - name: '⬇️ Checkout Code'
        uses: actions/checkout@v4
        with:
          # 需要完整历史来比较最近的两次提交
          fetch-depth: 0 
      
      - name: '🔧 Install Dependencies (ImageMagick)'
        # 我们不再需要 avifenc，但仍然需要 imagemagick 来获取图片尺寸
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: '🔄 Find, Process, and Replace Images'
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }} # 关键：确保你已经在仓库 Secrets 中设置了此项
        run: |
          echo "🔍 Finding new or modified images from this push..."
          
          # 1. 只获取本次 push 中被添加(A)或修改(M)的图片文件
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.event.after }} | grep -E '^content/.*\.(jpg|jpeg|png)$' || true)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "✅ No new or modified images to process. Exiting."
            exit 0
          fi

          echo "Found images to process:"
          echo "$CHANGED_FILES"
          echo "---------------------------------"

          # 2. 准备尺寸数据并构建 API 请求的 URL 列表
          URL_LIST=""
          for file in $CHANGED_FILES; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            base="${filename%.*}"
            
            # --- 你的原始逻辑：获取并保存尺寸 ---
            dimensions=$(identify -format "%wx%h" "$file")
            width=$(echo $dimensions | cut -d'x' -f1)
            height=$(echo $dimensions | cut -d'x' -f2)
            dimensions_file="${dir}/.image_dimensions.yaml"
            echo "  - Processing $file (${width}x${height})"

            if [ ! -f "$dimensions_file" ]; then
              echo "# Image Dimensions Data - Auto-generated by GitHub Actions" > "$dimensions_file"
              echo "dimensions:" >> "$dimensions_file"
            fi
            
            # 使用更安全的 YML 格式追加，避免重复条目
            # 先删除可能存在的旧条目
            sed -i "/\"${base}\":/,/height:/d" "$dimensions_file"
            # 再添加新条目
            echo "  \"${base}\":" >> "$dimensions_file"
            echo "    width: $width" >> "$dimensions_file"
            echo "    height: $height" >> "$dimensions_file"
            # --- 尺寸逻辑结束 ---

            # 构建 GitHub Raw URL 并添加到列表中
            # 注意：URL 编码很重要，但对于 GitHub 路径通常不是问题
            RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$file"
            URL_LIST+="\"$RAW_URL\","
          done

          # 移除最后一个逗号，并用方括号包裹，形成合法的 JSON 数组
          URLS_JSON="[${URL_LIST%,}]"
          echo "🚀 Sending image list to ShortPixel API..."

          # 3. 一次性调用 ShortPixel API
          JSON_PAYLOAD=$(cat <<EOF
          {
            "key": "$SHORTPIXEL_KEY",
            "plugin_version": "GHA24",
            "lossy": 1,
            "wait": 30,
            "resize": 1,
            "resize_width": 1920,
            "convertto": "+avif",
            "urllist": $URLS_JSON
          }
EOF
          )
          
          API_RESPONSE=$(curl -s -X POST "https://api.shortpixel.com/v2/reducer.php" -H "Content-Type: application/json" -d "$JSON_PAYLOAD")

          # 4. 解析响应并下载优化后的图片
          echo "📥 Processing API response and downloading files..."
          echo "$API_RESPONSE" | jq -c '.[]' | while read -r item; do
             STATUS=$(echo "$item" | jq -r '.Status.Code')
             ORIGINAL_URL=$(echo "$item" | jq -r '.OriginalURL')
             
             # 从 URL 反向找到本地文件路径
             LOCAL_FILE=$(echo "$ORIGINAL_URL" | sed "s|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/||")
             
             if [[ "$STATUS" == "2" ]]; then
                AVIF_URL=$(echo "$item" | jq -r '.AVIFLossyURL')
                dir=$(dirname "$LOCAL_FILE")
                base=$(basename "$LOCAL_FILE" | sed 's/\.[^.]*$//')
                avif_output="${dir}/${base}.avif"

                echo "  - SUCCESS for $LOCAL_FILE. Downloading AVIF..."
                curl -s -L "$AVIF_URL" -o "$avif_output"
                
                # 下载成功后，删除原图
                echo "  - Deleting original: $LOCAL_FILE"
                rm "$LOCAL_FILE"
             else
                MESSAGE=$(echo "$item" | jq -r '.Status.Message')
                echo "  - ❌ ERROR for $LOCAL_FILE: $MESSAGE (Code: $STATUS)"
                # 如果某个文件失败，你可以选择是继续还是让整个工作流失败
                # exit 1 # 如果需要严格模式，取消此行注释
             fi
          done

          echo "✅ Image processing complete."

      - name: '🚀 Commit and Push Changes'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'build(media): Convert bundle images to AVIF via ShortPixel'
          commit_user_name: 'github-actions[bot]' # 推荐使用 [bot] 后缀
          commit_user_email: 'github-actions-bot@users.noreply.github.com'
