# .github/workflows/image-optimizer.yml
name: 'ü§ñ Optimize Bundle Images with ShortPixel'

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png' 
      - 'content/**/*.jpeg'

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'

    steps:
      - name: '‚¨áÔ∏è Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      
      - name: 'üîß Install Dependencies (ImageMagick & jq)'
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick jq

      - name: 'üîÑ Find, Process, and Replace Images'
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
        run: |
          echo "üîç Finding new or modified images..."
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.event.after }} | grep -E '^content/.*\.(jpg|jpeg|png)$' || true)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "‚úÖ No new or modified images to process."
            exit 0
          fi

          echo "Found images to process:"
          echo "$CHANGED_FILES"

          # 1. Áõ¥Êé•Â∞ÜÊñá‰ª∂ÂàóË°®ËΩ¨Êç¢‰∏∫ JSON Ê†ºÂºèÁöÑ URL ÂàóË°®
          # ‰ΩøÁî® jq ÁöÑÂº∫Â§ßÂäüËÉΩÊù•ÂÆâÂÖ®Âú∞ÊûÑÂª∫ JSON Êï∞ÁªÑ
          URLS_JSON=$(echo "$CHANGED_FILES" | jq -R --slurp 'split("\n") | map(select(length > 0)) | map("https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/\(.)")')
          echo "Image URLs JSON: $URLS_JSON"
          echo "---------------------------------"

          # 2. Â§ÑÁêÜÊØè‰∏™Êñá‰ª∂ÁöÑÂ∞∫ÂØ∏‰ø°ÊÅØ (ËøôÈÉ®ÂàÜÈÄªËæë‰∏çÂèò)
          echo "üíæ Saving image dimensions..."
          for file in $CHANGED_FILES; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            base="${filename%.*}"
            
            dimensions=$(identify -format "%wx%h" "$file")
            width=$(echo $dimensions | cut -d'x' -f1)
            height=$(echo $dimensions | cut -d'x' -f2)
            dimensions_file="${dir}/.image_dimensions.yaml"
            echo "  - ${file} (${width}x${height})"

            if [ ! -f "$dimensions_file" ]; then
              echo "# Image Dimensions Data - Auto-generated by GitHub Actions" > "$dimensions_file"; echo "dimensions:" >> "$dimensions_file"
            fi
            
            if grep -q "\"${base}\":" "$dimensions_file"; then
              sed -i "/\"${base}\":/,/height:/d" "$dimensions_file"
            fi
            echo "  \"${base}\":" >> "$dimensions_file"; echo "    width: $width" >> "$dimensions_file"; echo "    height: $height" >> "$dimensions_file"
          done
          echo "---------------------------------"

          # 3. „ÄêÈáçË¶Å‰øÆÂ§ç„Äë‰ΩøÁî® jq ÂÆâÂÖ®Âú∞ÊûÑÂª∫ API ËØ∑Ê±ÇÁöÑ JSON payload
          echo "üöÄ Preparing ShortPixel API request..."
          JSON_PAYLOAD=$(jq -n --arg key "$SHORTPIXEL_KEY" --argjson urls "$URLS_JSON" '{
            key: $key,
            plugin_version: "GHA25",
            lossy: 2,
            wait: 30,
            resize: 0,
            convertto: "avif",
            urllist: $urls
          }')

          # 4. Ë∞ÉÁî® API Âπ∂‰∏ãËΩΩÁªìÊûú
          echo "üì• Calling API and downloading optimized images..."
          API_RESPONSE=$(curl -s -X POST "https://api.shortpixel.com/v2/reducer.php" -H "Content-Type: application/json" -d "$JSON_PAYLOAD")
          
          echo "$API_RESPONSE" | jq -c '.[]' | while read -r item; do
             STATUS=$(echo "$item" | jq -r '.Status.Code')
             ORIGINAL_URL=$(echo "$item" | jq -r '.OriginalURL')
             LOCAL_FILE=$(echo "$ORIGINAL_URL" | sed "s|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/||")
             
             if [[ "$STATUS" == "2" ]]; then
                AVIF_URL=$(echo "$item" | jq -r '.AVIFLossyURL')
                dir=$(dirname "$LOCAL_FILE"); base=$(basename "$LOCAL_FILE" | sed 's/\.[^.]*$//'); avif_output="${dir}/${base}.avif"
                echo "  - SUCCESS for $LOCAL_FILE. Downloading AVIF and removing original."
                curl -s -L "$AVIF_URL" -o "$avif_output" && rm "$LOCAL_FILE"
             else
                MESSAGE=$(echo "$item" | jq -r '.Status.Message')
                echo "  - ‚ùå ERROR for $LOCAL_FILE: $MESSAGE (Code: $STATUS)"
             fi
          done

          echo "‚úÖ Image processing complete."

      - name: 'üöÄ Commit and Push Changes'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'build(media): Convert bundle images to AVIF via ShortPixel'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions-bot@users.noreply.github.com'
