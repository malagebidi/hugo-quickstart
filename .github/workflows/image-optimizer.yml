# ÂøÖË¶Å‰øÆÂ§çÁâàÊú¨ - Âè™‰øÆÂ§çÂÖ≥ÈîÆÈóÆÈ¢ò
name: 'ü§ñ Optimize Bundle Images with ShortPixel'
on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png'
      - 'content/**/*.jpeg'
      - 'content/**/*.avif'
  
  schedule:
    - cron: '0 0 * * *'
    
  workflow_dispatch:

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'
    steps:
      - name: '‚¨áÔ∏è Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'üîÑ Pull Latest Changes'
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git pull origin main || true
          
      - name: 'üîß Install Dependencies'
        run: sudo apt-get update && sudo apt-get install -y imagemagick jq

      - name: 'üîÑ Find Images to Process'
        id: find_files
        run: |
          #!/bin/bash  # ‰øÆÂ§ç1: ÊòéÁ°ÆÊåáÂÆö bash
          set -e       # ‰øÆÂ§ç2: Âá∫ÈîôÊó∂ÂÅúÊ≠¢ÊâßË°å
          
          echo "üîç Finding images that need conversion..."
          
          FILES_TO_PROCESS=""
          
          # ‰ΩøÁî® for Âæ™ÁéØ‰ª£Êõø find Êù•ÈÅøÂÖçËØ≠Ê≥ïÈîôËØØ
          for ext in jpg jpeg png; do
            for file in $(find content -type f -name "*.${ext}" 2>/dev/null || true); do
              # ‰øÆÂ§ç3: È™åËØÅÊñá‰ª∂Ë∑ØÂæÑ
              if [ -f "$file" ] && [[ "$file" =~ ^content/.+ ]]; then
                base_path="${file%.*}"
                
                # Ëé∑ÂèñÂéüÂõæÂ∞∫ÂØ∏
                if ! dimensions=$(identify -format "%wx%h" "$file" 2>/dev/null); then
                  echo "‚ö†Ô∏è Cannot read dimensions for: $file"
                  continue
                fi
                width=$(echo "$dimensions" | cut -d'x' -f1)
                
                # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂ§ÑÁêÜ
                needs_processing=false
                sizes="480 960 1200 1920 2560 3840"
                
                if [ "$width" -le 3840 ] && [ ! -f "${base_path}.avif" ]; then
                  needs_processing=true
                fi
                
                if [ "$needs_processing" = "false" ]; then
                  for size in $sizes; do
                    if [ "$width" -gt "$size" ] && [ ! -f "${base_path}_${size}w.avif" ]; then
                      needs_processing=true
                      break
                    fi
                  done
                fi
                
                if [ "$needs_processing" = "true" ]; then
                  FILES_TO_PROCESS="$FILES_TO_PROCESS $file"
                fi
              fi
            done
          done
          
          # ËæìÂá∫ÁªìÊûú
          if [ -n "$FILES_TO_PROCESS" ]; then
            echo "files_to_process=$FILES_TO_PROCESS" >> $GITHUB_OUTPUT
            echo "  - Found $(echo $FILES_TO_PROCESS | wc -w) images needing processing."
          else
            echo "files_to_process=" >> $GITHUB_OUTPUT
            echo "‚úÖ No images to process."
          fi

      - name: 'üöÄ Process Images with ShortPixel'
        if: steps.find_files.outputs.files_to_process != ''
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
          FILES_TO_PROCESS: ${{ steps.find_files.outputs.files_to_process }}
          MAX_ATTEMPTS: 3
          POLL_INTERVAL_SECONDS: 20
        run: |
          #!/bin/bash  # ‰øÆÂ§ç1: ÊòéÁ°ÆÊåáÂÆö bash
          set -e       # ‰øÆÂ§ç2: Âá∫ÈîôÊó∂ÂÅúÊ≠¢ÊâßË°å
          
          # ‰øÆÂ§ç3: ‰ΩøÁî®ÁÆÄÂçïÂèòÈáèËÄåÈùûÂÖ≥ËÅîÊï∞ÁªÑÔºàÂÖºÂÆπÊÄßÊõ¥Â•ΩÔºâ
          processed_files=""
          
          # Â§ÑÁêÜÊØè‰∏™Êñá‰ª∂
          for file_path in $FILES_TO_PROCESS; do
            # ‰øÆÂ§ç4: È™åËØÅÊñá‰ª∂Ë∑ØÂæÑ
            if [ ! -f "$file_path" ] || [[ ! "$file_path" =~ ^content/.+ ]]; then
              echo "‚ö†Ô∏è Invalid or missing file: $file_path"
              continue
            fi
            
            echo -e "\nüîÑ Processing: $file_path"
            base_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$file_path"
            base_path="${file_path%.*}"
            
            # Ëé∑ÂèñÂ∞∫ÂØ∏
            if ! dimensions=$(identify -format "%wx%h" "$file_path" 2>/dev/null); then
              echo "‚ö†Ô∏è Cannot read dimensions for: $file_path"
              continue
            fi
            width=$(echo "$dimensions" | cut -d'x' -f1)
            height=$(echo "$dimensions" | cut -d'x' -f2)
            
            echo "  Original dimensions: ${width}x${height}"
            
            sizes="480 960 1200 1920 2560 3840"
            file_processed=false
            
            # Â§ÑÁêÜÂéüÂõæ
            if [ "$width" -le 3840 ] && [ ! -f "${base_path}.avif" ]; then
              echo "  - Processing original size..."
              
              for attempt in $(seq 1 $MAX_ATTEMPTS); do
                echo "    Attempt $attempt/$MAX_ATTEMPTS"
                
                # ‰øÆÂ§ç5: ÊîπËøõ JSON ÊûÑÈÄ†ÔºåÈÅøÂÖçÊ≥®ÂÖ•
                JSON_PAYLOAD=$(cat <<EOF
{
  "key": "$SHORTPIXEL_KEY",
  "plugin_version": "GHA45",
  "lossy": 2,
  "wait": 20,
  "urllist": ["$base_url"],
  "paramlist": [{
    "resize": 0,
    "convertto": "avif"
  }]
}
EOF
)
                
                # ‰øÆÂ§ç6: ÊîπËøõ API ÂìçÂ∫îÂ§ÑÁêÜ
                if API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php); then
                  # È™åËØÅÂìçÂ∫îÊòØÂê¶‰∏∫ÊúâÊïà JSON
                  if echo "$API_RESPONSE" | jq empty 2>/dev/null; then
                    status_code=$(echo "$API_RESPONSE" | jq -r '.[0].Status.Code // empty')
                    avif_url=$(echo "$API_RESPONSE" | jq -r '.[0].AVIFLossyURL // empty')
                    
                    if [ "$status_code" = "2" ] && [ -n "$avif_url" ] && [ "$avif_url" != "null" ] && [ "$avif_url" != "NA" ]; then
                      if curl -fsS --retry 2 -o "${base_path}.avif" "$avif_url"; then
                        echo "    ‚úÖ Successfully generated: $(basename "${base_path}.avif")"
                        file_processed=true
                        break
                      fi
                    fi
                  else
                    echo "    ‚ùå Invalid JSON response"
                  fi
                else
                  echo "    ‚ùå API request failed"
                fi
                
                if [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                  sleep $POLL_INTERVAL_SECONDS
                fi
              done
            fi
            
            # Â§ÑÁêÜÂêÑ‰∏™Â∞∫ÂØ∏ÔºàÁ±ª‰ººÁöÑ‰øÆÂ§çÔºâ
            for target_width in $sizes; do
              if [ "$width" -gt "$target_width" ] && [ ! -f "${base_path}_${target_width}w.avif" ]; then
                target_height=$((height * target_width / width))
                echo "  - Processing ${target_width}w version..."
                
                for attempt in $(seq 1 $MAX_ATTEMPTS); do
                  JSON_PAYLOAD=$(cat <<EOF
{
  "key": "$SHORTPIXEL_KEY",
  "plugin_version": "GHA45",
  "lossy": 2,
  "wait": 20,
  "urllist": ["$base_url"],
  "paramlist": [{
    "resize": 3,
    "resize_width": $target_width,
    "resize_height": $target_height,
    "convertto": "avif"
  }]
}
EOF
)
                  
                  if API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php); then
                    if echo "$API_RESPONSE" | jq empty 2>/dev/null; then
                      status_code=$(echo "$API_RESPONSE" | jq -r '.[0].Status.Code // empty')
                      avif_url=$(echo "$API_RESPONSE" | jq -r '.[0].AVIFLossyURL // empty')
                      
                      if [ "$status_code" = "2" ] && [ -n "$avif_url" ] && [ "$avif_url" != "null" ] && [ "$avif_url" != "NA" ]; then
                        if curl -fsS --retry 2 -o "${base_path}_${target_width}w.avif" "$avif_url"; then
                          echo "    ‚úÖ Successfully generated: $(basename "${base_path}_${target_width}w.avif")"
                          file_processed=true
                          break
                        fi
                      fi
                    fi
                  fi
                  
                  if [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                    sleep $POLL_INTERVAL_SECONDS
                  fi
                done
              fi
            done
            
            # ËÆ∞ÂΩïÊàêÂäüÂ§ÑÁêÜÁöÑÊñá‰ª∂
            if [ "$file_processed" = true ]; then
              processed_files="$processed_files $file_path"
            fi
          done
          
          # Â§ÑÁêÜÊàêÂäüËΩ¨Êç¢ÁöÑÂéüÂßãÊñá‰ª∂
          echo -e "\nüóëÔ∏è Cleaning up processed files..."
          for original_file in $processed_files; do
            if [ -f "$original_file" ]; then
              base_path="${original_file%.*}"
              if [ -f "${base_path}.avif" ] || ls "${base_path}_"*"w.avif" >/dev/null 2>&1; then
                # ÂÆâÂÖ®Âà†Èô§Êñá‰ª∂
                if [[ "$original_file" =~ ^content/.+\.(jpg|jpeg|png)$ ]]; then
                  # ËÆ∞ÂΩïÂ∞∫ÂØ∏‰ø°ÊÅØ
                  dimensions=$(identify -format "%wx%h" "$original_file" 2>/dev/null || echo "unknown")
                  dir_path=$(dirname "$original_file")
                  base_name=$(basename "$original_file" | sed 's/\.[^.]*$//')
                  yaml_file="$dir_path/.image_dimensions.yaml"
                  
                  touch "$yaml_file"
                  if grep -q "^${base_name}:" "$yaml_file" 2>/dev/null; then
                    sed -i "s|^${base_name}:.*|${base_name}: ${dimensions}|" "$yaml_file"
                  else
                    echo "${base_name}: ${dimensions}" >> "$yaml_file"
                  fi
                  
                  rm "$original_file"
                  echo "  - ‚úÖ Removed: $(basename "$original_file")"
                else
                  echo "  - ‚ö†Ô∏è Skipping unsafe file path: $original_file"
                fi
              fi
            fi
          done

      - name: 'üßπ Clean up orphaned dimensions'
        run: |
          #!/bin/bash
          set -e
          echo "üßπ Cleaning up orphaned dimension entries..."
          find content -name ".image_dimensions.yaml" 2>/dev/null | while read -r yaml_file; do
            if [ -f "$yaml_file" ]; then
              dir_path=$(dirname "$yaml_file")
              temp_file=$(mktemp)
              while IFS=': ' read -r base_name dimensions; do
                if [ -f "$dir_path/$base_name.avif" ] || ls "$dir_path/${base_name}_"*"w.avif" >/dev/null 2>&1; then
                  echo "$base_name: $dimensions" >> "$temp_file"
                fi
              done < "$yaml_file"
              mv "$temp_file" "$yaml_file"
              
              if [ ! -s "$yaml_file" ]; then
                rm "$yaml_file"
              fi
            fi
          done
    
      - name: 'üöÄ Commit and Push Changes'
        run: |
          #!/bin/bash
          set -e
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'

          # ‰øÆÂ§ç7: Êîπ‰∏∫ÂÆâÂÖ®ÁöÑ git Êìç‰Ωú
          git fetch origin
          
          echo "üîç Checking for changes..."
          find content -name "*.avif" -type f -exec git add {} + 2>/dev/null || true
          find content -name ".image_dimensions.yaml" -type f -exec git add {} + 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "üì≠ No changes to commit"
          else
            echo "‚úÖ Found changes, committing..."
            git commit -m "build(media): Convert images to multi-size AVIF"
            
            # ‰øÆÂ§ç8: ‰ΩøÁî®ÂÆâÂÖ®ÁöÑ pushÔºåÂ¶ÇÊûúÂ§±Ë¥•Â∞±Êä•Âëä
            if ! git push origin main; then
              echo "‚ùå Push failed - there might be conflicts"
              echo "üîÑ Trying to rebase and push again..."
              git pull --rebase origin main
              git push origin main
            fi
            echo "üöÄ Changes pushed successfully"
          fi
