# Êñá‰ª∂Ë∑ØÂæÑ: .github/workflows/image-optimizer.yml

name: 'ü§ñ Optimize Bundle Images with ShortPixel'

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png'
      - 'content/**/*.jpeg'
      - 'content/**/*.avif'
  
  schedule:
    - cron: '0 0 * * *'
    
  workflow_dispatch:

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'

    steps:
      - name: '‚¨áÔ∏è Checkout Code'
        uses: actions/checkout@v4

      - name: 'üîß Install Dependencies'
        run: sudo apt-get update && sudo apt-get install -y imagemagick jq

      - name: 'üîÑ Find Images to Process'
        id: find_files
        run: |
          echo "üîç Finding images that need conversion..."
          FILE_LIST=$(
            find content -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) | while read -r f; do
              # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®‰ªª‰ΩïÂØπÂ∫îÁöÑ AVIF Êñá‰ª∂
              base_path="${f%.*}"
              has_avif=false
              
              # Ëé∑ÂèñÂéüÂõæÂ∞∫ÂØ∏Êù•Âà§Êñ≠Â∫îËØ•ÁîüÊàêÂì™‰∫õÂ∞∫ÂØ∏
              dimensions=$(identify -format "%wx%h" "$f" 2>/dev/null || echo "0x0")
              width=$(echo "$dimensions" | cut -d'x' -f1)
              
              # ÂÆö‰πâÈúÄË¶ÅÁöÑÂ∞∫ÂØ∏
              sizes="480 960 1200 1920 2560 3840"
              
              # Ê£ÄÊü•ÂéüÂõæÊú¨Ë∫´ÁöÑ AVIF
              if [ ! -f "${base_path}.avif" ]; then
                echo "$f"
                continue
              fi
              
              # Ê£ÄÊü•ÂêÑ‰∏™Â∞∫ÂØ∏ÁöÑ AVIF
              for size in $sizes; do
                if [ "$width" -gt "$size" ] && [ ! -f "${base_path}_${size}w.avif" ]; then
                  echo "$f"
                  break
                fi
              done
            done | sort -u
          )
          UNCONVERTED_FILES=$(echo $FILE_LIST)
          if [ -n "$UNCONVERTED_FILES" ]; then
            echo "  - Found $(echo $UNCONVERTED_FILES | wc -w) images needing processing."
            echo "files_to_process=${UNCONVERTED_FILES}" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No images to process."
            echo "files_to_process=" >> $GITHUB_OUTPUT
          fi

      - name: 'üßπ Clean up orphaned dimensions'
        run: |
          echo "üßπ Cleaning up orphaned dimension entries..."
          find content -name ".image_dimensions.yaml" | while read -r yaml_file; do
            if [ -f "$yaml_file" ]; then
              dir_path=$(dirname "$yaml_file")
              temp_file=$(mktemp)
              while IFS=': ' read -r base_name dimensions; do
                # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®ÂØπÂ∫îÁöÑ AVIF Êñá‰ª∂ÔºàÂéüÂõæÊàñ‰ªª‰ΩïÂ∞∫ÂØ∏Ôºâ
                if [ -f "$dir_path/$base_name.avif" ] || ls "$dir_path/${base_name}_"*"w.avif" >/dev/null 2>&1; then
                  echo "$base_name: $dimensions" >> "$temp_file"
                fi
              done < "$yaml_file"
              mv "$temp_file" "$yaml_file"
              
              # Â¶ÇÊûúÊñá‰ª∂‰∏∫Á©∫ÂàôÂà†Èô§
              if [ ! -s "$yaml_file" ]; then
                rm "$yaml_file"
              fi
            fi
          done
          
      - name: 'üöÄ Process Images with ShortPixel'
        if: steps.find_files.outputs.files_to_process != ''
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
          FILES_TO_PROCESS: ${{ steps.find_files.outputs.files_to_process }}
          MAX_ATTEMPTS: 5
          POLL_INTERVAL_SECONDS: 30
        run: |
          # ‰∏∫ÊØè‰∏™ÂõæÁâáÁîüÊàêÂ§ö‰∏™Â∞∫ÂØ∏ÁöÑ URL ÂíåÂèÇÊï∞
          declare -a url_list
          declare -a param_list
          declare -a file_mapping
          
          for file_path in $FILES_TO_PROCESS; do
            base_url="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/$file_path"
            
            # Ëé∑ÂèñÂõæÁâáÂ∞∫ÂØ∏
            dimensions=$(identify -format "%wx%h" "$file_path")
            width=$(echo "$dimensions" | cut -d'x' -f1)
            height=$(echo "$dimensions" | cut -d'x' -f2)
            
            echo "üìè Processing $file_path (${width}x${height})"
            
            # ÂÆö‰πâÈúÄË¶ÅÁîüÊàêÁöÑÂ∞∫ÂØ∏
            sizes="480 960 1200 1920 2560 3840"
            
            # Ê∑ªÂä†ÂéüÂõæÂ§ÑÁêÜÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®ÂØπÂ∫î AVIFÔºâ
            base_path="${file_path%.*}"
            if [ ! -f "${base_path}.avif" ]; then
              url_list+=("$base_url")
              param_list+=('{
                "resize": 0,
                "convertto": "avif"
              }')
              file_mapping+=("$file_path:original")
            fi
            
            # Ê∑ªÂä†ÂêÑ‰∏™Â∞∫ÂØ∏ÁöÑÂ§ÑÁêÜ
            for target_width in $sizes; do
              if [ "$width" -gt "$target_width" ] && [ ! -f "${base_path}_${target_width}w.avif" ]; then
                # ËÆ°ÁÆóÂØπÂ∫îÁöÑÈ´òÂ∫¶Ôºå‰øùÊåÅÂÆΩÈ´òÊØî
                target_height=$((height * target_width / width))
                
                url_list+=("$base_url")
                param_list+=('{
                  "resize": 3,
                  "resize_width": '$target_width',
                  "resize_height": '$target_height',
                  "convertto": "avif"
                }')
                file_mapping+=("$file_path:${target_width}w")
                echo "  - Will generate ${target_width}w version"
              fi
            done
          done
          
          if [ ${#url_list[@]} -eq 0 ]; then
            echo "‚úÖ All images are already processed!"
            exit 0
          fi
          
          echo "üìä Total conversions to process: ${#url_list[@]}"
          
          # Â∞ÜÊï∞ÁªÑËΩ¨Êç¢‰∏∫ JSON
          url_json=$(printf '%s\n' "${url_list[@]}" | jq -R . | jq -s .)
          param_json=$(printf '%s\n' "${param_list[@]}" | jq -s .)
          
          # ÂàÜÊâπÂ§ÑÁêÜÔºàShortPixel API ÈôêÂà∂ÊØèÊ¨°ÊúÄÂ§ö 100 ‰∏™ URLÔºâ
          batch_size=50
          total_urls=${#url_list[@]}
          
          for ((i=0; i<total_urls; i+=batch_size)); do
            end=$((i + batch_size - 1))
            if [ $end -ge $total_urls ]; then
              end=$((total_urls - 1))
            fi
            
            echo -e "\nüîÑ Processing batch $((i/batch_size + 1)): URLs $((i+1)) to $((end+1))"
            
            # ÂàõÂª∫ÂΩìÂâçÊâπÊ¨°ÁöÑ URL ÂíåÂèÇÊï∞
            batch_urls=$(echo "$url_json" | jq ".[$i:$((end+1))]")
            batch_params=$(echo "$param_json" | jq ".[$i:$((end+1))]")
            
            for attempt in $(seq 1 $MAX_ATTEMPTS); do
              if [ "$(echo "$batch_urls" | jq 'length')" -eq 0 ]; then
                break
              fi
              
              echo "  Attempt $attempt/$MAX_ATTEMPTS for current batch"
              
              JSON_PAYLOAD=$(jq -n \
                --arg key "$SHORTPIXEL_KEY" \
                --argjson urls "$batch_urls" \
                --argjson params "$batch_params" \
                '{
                  key: $key,
                  plugin_version: "GHA45",
                  lossy: 2,
                  wait: 30,
                  urllist: $urls,
                  paramlist: $params
                }')
              
              API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php)
              
              # Â§ÑÁêÜÊàêÂäüÁöÑËΩ¨Êç¢
              echo "$API_RESPONSE" | jq -c '.[] | select(.Status.Code == "2")' | while read -r item; do
                original_url=$(echo "$item" | jq -r .OriginalURL)
                avif_url=$(echo "$item" | jq -r '.AVIFLossyURL // empty')
                
                # Êü•ÊâæÂØπÂ∫îÁöÑÊñá‰ª∂Êò†Â∞Ñ
                for ((j=0; j<${#url_list[@]}; j++)); do
                  if [ "${url_list[j]}" = "$original_url" ]; then
                    mapping="${file_mapping[j]}"
                    original_file_path=$(echo "$mapping" | cut -d':' -f1)
                    size_suffix=$(echo "$mapping" | cut -d':' -f2)
                    
                    if [ -n "$avif_url" ] && [ "$avif_url" != "null" ] && [ "$avif_url" != "NA" ]; then
                      dir_path=$(dirname "$original_file_path")
                      base_name=$(basename "$original_file_path" | sed 's/\.[^.]*$//')
                      
                      if [ "$size_suffix" = "original" ]; then
                        avif_path="$dir_path/$base_name.avif"
                        echo "    - ‚úÖ Downloaded original AVIF: $base_name.avif"
                      else
                        avif_path="$dir_path/${base_name}_${size_suffix}.avif"
                        echo "    - ‚úÖ Downloaded resized AVIF: ${base_name}_${size_suffix}.avif"
                      fi
                      
                      curl -fsS --retry 3 -o "$avif_path" "$avif_url"
                      
                      # Âè™ÊúâÂéüÂõæÈúÄË¶ÅËÆ∞ÂΩïÂ∞∫ÂØ∏ÂíåÂà†Èô§Ê∫êÊñá‰ª∂
                      if [ "$size_suffix" = "original" ] && [ -s "$avif_path" ]; then
                        dimensions=$(identify -format "%wx%h" "$original_file_path")
                        yaml_file="$dir_path/.image_dimensions.yaml"
                        touch "$yaml_file"
                        grep -q "${base_name}:" "$yaml_file" && sed -i "s|${base_name}:.*|${base_name}: ${dimensions}|" "$yaml_file" || echo "${base_name}: ${dimensions}" >> "$yaml_file"
                        rm "$original_file_path"
                      fi
                    fi
                    break
                  fi
                done
              done
              
              # Êõ¥Êñ∞ÂæÖÂ§ÑÁêÜÁöÑÊâπÊ¨°
              next_batch_urls=$(echo "$API_RESPONSE" | jq '[.[] | select(.Status.Code != "2" or (.AVIFLossyURL == null or .AVIFLossyURL == "NA" or .AVIFLossyURL == "")) | .OriginalURL]')
              batch_urls="$next_batch_urls"
              
              if [ "$(echo "$batch_urls" | jq 'length')" -eq 0 ]; then
                break
              fi
              
              if [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                echo "    Waiting ${POLL_INTERVAL_SECONDS}s before retry..."
                sleep $POLL_INTERVAL_SECONDS
              fi
            done
          done

      - name: 'üöÄ Commit and Push Changes'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'build(media): Convert images to multi-size AVIF'
          commit_author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
