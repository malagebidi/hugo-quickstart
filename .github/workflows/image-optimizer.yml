# FILE: .github/workflows/image-optimizer.yml (DEBUGGING VERSION)

name: 'ü§ñ DEBUG - Optimize Bundle Images'

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.jpg'
      - 'content/**/*.png'
      - 'content/**/*.jpeg'
  workflow_dispatch:

jobs:
  build:
    name: Convert Images Job
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event.pusher.name != 'GitHub Actions Bot' && github.event.pusher.name != 'github-actions[bot]'

    steps:
      - name: '‚¨áÔ∏è Checkout Code'
        uses: actions/checkout@v4
      
      # ======================================================================
      # === üïµÔ∏è NEW DEBUGGING STEP - "THE BLACK BOX" ===
      # ======================================================================
      - name: 'üïµÔ∏è Run Diagnostics and Trace File Logic'
        id: diagnostics
        run: |
          echo "--- 1. Current Working Directory & Git Status ---"
          pwd
          git status
          
          echo ""
          echo "--- 2. Recursive File Listing in 'content/' ---"
          # This is the most important command. It will show us EXACTLY what files exist.
          ls -R content/
          
          echo ""
          echo "--- 3. Running the 'find' command standalone ---"
          # Let's see what the find command returns on its own.
          find content -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \)
          
          echo ""
          echo "--- 4. Tracing the file checking logic step-by-step ---"
          UNCONVERTED_FILES=""
          find content -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) | while read -r f; do
            avif_path="${f%.*}.avif"
            echo "   - Checking original file: '$f'"
            echo "     > Corresponding AVIF path should be: '$avif_path'"
            if [ -f "$avif_path" ]; then
              echo "     > RESULT: SKIPPED. Reason: Found existing AVIF file at '$avif_path'."
            else
              echo "     > RESULT: FOUND! Reason: No AVIF file found. Adding to process list."
              UNCONVERTED_FILES="$UNCONVERTED_FILES$f "
            fi
          done
          
          echo ""
          echo "--- S. Final Result ---"
          if [ -n "$UNCONVERTED_FILES" ]; then
            echo "‚úÖ UNCONVERTED_FILES variable is NOT empty. The files found are:"
            echo "$UNCONVERTED_FILES"
            echo "files_to_process=${UNCONVERTED_FILES}" >> $GITHUB_OUTPUT
          else
            echo "‚ùå UNCONVERTED_FILES variable is EMPTY. No files will be processed."
            echo "files_to_process=" >> $GITHUB_OUTPUT
          fi

      # The original 'Find Images' step is now replaced by the diagnostics step above.
      # The rest of the workflow remains the same, but will use the output from diagnostics.
          
      - name: 'üöÄ Process Images with ShortPixel and Smart Polling'
        if: steps.diagnostics.outputs.files_to_process != ''
        # ... (The rest of the file is identical to the previous version)
        env:
          SHORTPIXEL_KEY: ${{ secrets.SHORTPIXEL_KEY }}
          FILES_TO_PROCESS: ${{ steps.diagnostics.outputs.files_to_process }}
          MAX_ATTEMPTS: 5
          POLL_INTERVAL_SECONDS: 60
        run: |
          PENDING_URLS_STRING=$(echo "$FILES_TO_PROCESS" | tr ' ' '\n' | jq -R . | jq -s 'map("https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/" + .)')
          
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -eq 0 ]; then
                echo "üéâ All images processed successfully!"
                break
            fi

            echo "
            -=================================-
            -   ATTEMPT ${attempt} / ${MAX_ATTEMPTS}
            -   Processing $(echo "$PENDING_URLS_STRING" | jq 'length') images...
            -=================================-
            "

            JSON_PAYLOAD=$(jq -n --arg key "$SHORTPIXEL_KEY" --argjson urls "$PENDING_URLS_STRING" '{
              key: $key, plugin_version: "GHA41", lossy: 2, wait: 30, convertto: "+avif", urllist: $urls
            }')

            echo "üìû Calling ShortPixel API..."
            API_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://api.shortpixel.com/v2/reducer.php)
            
            NEXT_PENDING_URLS_STRING="[]"

            echo "‚úÖ API call successful. Analyzing results..."
            echo "$API_RESPONSE" | jq -c '.[]' | while read -r item; do
              original_url=$(echo "$item" | jq -r .OriginalURL)
              original_path=$(echo "$original_url" | sed "s|https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/||")
              status_code=$(echo "$item" | jq -r .Status.Code)
              status_message=$(echo "$item" | jq -r .Status.Message)

              if [ "$status_code" == "2" ]; then
                  avif_url=$(echo "$item" | jq -r .AVIFURL)
                  if [ "$avif_url" == "null" ] || [ -z "$avif_url" ]; then
                      echo "    - ‚ö†Ô∏è UNEXPECTED: Status 2 but AVIF URL is null for '$original_path'. Skipping."
                      continue
                  fi
                  dir_path=$(dirname "$original_path"); base_name=$(basename "$original_path" | sed 's/\.[^.]*$//'); avif_path="$dir_path/$base_name.avif"
                  echo "    - ‚úÖ SUCCESS ($status_code): Downloading for $original_path"
                  
                  temp_url="${avif_url#*//}"; url_hostname="${temp_url%%/*}"; ip_address=$(dig @1.1.1.1 "$url_hostname" +short | head -n 1)
                  if [ -z "$ip_address" ]; then echo "    -   ‚ùå DNS resolution failed for '${url_hostname}'."; continue; fi
                  
                  curl -fsS --retry 3 --resolve "${url_hostname}:443:${ip_address}" -o "$avif_path" "$avif_url"
                  if [ -s "$avif_path" ]; then
                      dimensions=$(identify -format "%wx%h" "$original_path")
                      yaml_file="$dir_path/.image_dimensions.yaml"; touch "$yaml_file"
                      grep -q "${base_name}:" "$yaml_file" && sed -i "s|${base_name}:.*|${base_name}: ${dimensions}|" "$yaml_file" || echo "${base_name}: ${dimensions}" >> "$yaml_file"
                      echo "    -   Saved dimensions and removing original file: $original_path"
                      rm "$original_path"
                  else
                      echo "    -   ‚ùå Download failed for '$original_path'. Will retry."
                      NEXT_PENDING_URLS_STRING=$(echo "$NEXT_PENDING_URLS_STRING" | jq --arg url "$original_url" '. + [$url]')
                  fi
              elif [ "$status_code" == "1" ]; then
                  echo "    - ‚è≥ IN PROGRESS ($status_code): '$original_path' still processing. Will retry."
                  NEXT_PENDING_URLS_STRING=$(echo "$NEXT_PENDING_URLS_STRING" | jq --arg url "$original_url" '. + [$url]')
              else
                  echo "    - ‚ùå ERROR ($status_code): Could not process '$original_path'. Reason: '$status_message'."
              fi
            done
            
            PENDING_URLS_STRING="$NEXT_PENDING_URLS_STRING"

            if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -gt 0 ] && [ "$attempt" -lt "$MAX_ATTEMPTS" ]; then
                echo -e "\n\t... waiting ${POLL_INTERVAL_SECONDS} seconds before next attempt ...\n"
                sleep $POLL_INTERVAL_SECONDS
            fi
          done

          if [ "$(echo "$PENDING_URLS_STRING" | jq 'length')" -gt 0 ]; then
              echo "‚ö†Ô∏è WARNING: After ${MAX_ATTEMPTS} attempts, the following images are still not processed. They will be retried on the next scheduled run:"
              echo "$PENDING_URLS_STRING" | jq -r '.[]'
          fi

      - name: 'üöÄ Commit and Push Changes'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'build(media): Convert bundle images to AVIF'
          commit_author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>

